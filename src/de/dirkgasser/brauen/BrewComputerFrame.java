package de.dirkgasser.brauen;

import static de.dirkgasser.brauen.BrewComputerMain.brewRecipe;
import static de.dirkgasser.brauen.BrewComputerMain.heater;
import static de.dirkgasser.brauen.BrewComputerMain.pump;
import static de.dirkgasser.brauen.BrewComputerMain.recipeframe;
import static de.dirkgasser.brauen.BrewComputerMain.testFrame;
import static de.dirkgasser.brauen.BrewComputerMain.isAlive;
import java.awt.Color;
import java.awt.Dimension;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.YES_NO_OPTION;
import javax.swing.JToggleButton;

/**
 * Swing frame control panel for brew computer <br>
 * Designed with NetBeans editor, therefor some components are placeholder <br>
 * Panel jpPrevStep: Replaced by JPBrewStep <br>
 * Panel jpCurrentStep: Replaced by JPBrewStep <br>
 * Panel jpNextStep: Replaced by JPBrewStep <br>
 * @author Dirk Gasser
 * @version 1.0

 */
public class BrewComputerFrame extends javax.swing.JFrame {
    double width = 480;
    double height = 800;
    Dimension dim;
    /**
     * Creates new form BrewComputerFrame
     */
    public BrewComputerFrame() {
        /*t.getDefaultToolkit().getScreenSize();
        width = screenSize.getWidth();
        height = screenSize.getHeight();
        GraphicsEnvironment env = GraphicsEnvironment.getLocalGraphicsEnvironment();
        setExtendedState(this.getExtendedState() | this.MAXIMIZED_BOTH);
        */
        initComponents();
        
       dim = new Dimension();
       dim.setSize(height, width);
       this.setMinimumSize(dim);
       this.setPreferredSize(dim);
       numberFormat = NumberFormat.getNumberInstance(Locale.GERMAN);
       ((DecimalFormat) numberFormat).applyPattern("###.#"); 
       
       setStepsinFrame(1);
       jtaRecipeName.setLineWrap(true);
       jtaRecipeName.setWrapStyleWord(true);
       jtaRecipeName.setText(brewRecipe.getRecipeName()); 
       
    }

/**
 * Instance is created at the start of main class <br>
 * After receipt is chosen in RecipeFrame it must be updated here <br>
 */

    public void refreshRecipe() {
       setStepsinFrame(1);
       jtaRecipeName.setText(brewRecipe.getRecipeName());
    } 
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenu1 = new javax.swing.JMenu();
        jpHead = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jtTimeAll = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jtTimeStep = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jtTempToBe = new javax.swing.JTextField();
        jtTempIs = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jcpRecipeName = new javax.swing.JScrollPane();
        jtaRecipeName = new javax.swing.JTextArea();
        jcpRecipeName1 = new javax.swing.JScrollPane();
        jtStatus = new javax.swing.JTextArea();
        jpControl = new javax.swing.JPanel();
        jtbStartStop = new javax.swing.JToggleButton();
        jtbPump = new javax.swing.JToggleButton();
        jtbHeater = new javax.swing.JToggleButton();
        jbConfirm = new javax.swing.JButton();
        jbPMinus = new javax.swing.JButton();
        jbPPlus = new javax.swing.JButton();
        jpPrevStep = new javax.swing.JPanel();
        jtStepName = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jtDuration = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtpIngredients = new javax.swing.JTextPane();
        jpCurrentStep = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jpTimeLine = new javax.swing.JPanel();
        jbBack = new javax.swing.JButton();
        jbMinus = new javax.swing.JButton();
        jbPlus = new javax.swing.JButton();
        jbNext = new javax.swing.JButton();
        jtbPause = new javax.swing.JToggleButton();
        jpNextStep = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jRecipe = new javax.swing.JMenu();
        jBrew = new javax.swing.JMenu();
        jmTestFrame = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        jMenu1.setText("jMenu1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Zeit insgesamt");

        jtTimeAll.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jtTimeAll.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jtTimeAll.setFocusable(false);
        jtTimeAll.setRequestFocusEnabled(false);

        jLabel2.setText("Zeit Brauschritt");

        jtTimeStep.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jtTimeStep.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jtTimeStep.setFocusable(false);
        jtTimeStep.setRequestFocusEnabled(false);

        jLabel3.setText("Temperatur Soll");

        jLabel4.setText("Temperatur Ist");

        jtTempToBe.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jtTempToBe.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jtTempToBe.setFocusable(false);

        jtTempIs.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jtTempIs.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jtTempIs.setFocusable(false);
        jtTempIs.setRequestFocusEnabled(false);

        jButton1.setBackground(new java.awt.Color(255, 204, 204));
        jButton1.setText("+");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(204, 255, 255));
        jButton2.setText("-");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jcpRecipeName.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jcpRecipeName.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jtaRecipeName.setColumns(20);
        jtaRecipeName.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jtaRecipeName.setRows(5);
        jtaRecipeName.setDisabledTextColor(new java.awt.Color(51, 51, 51));
        jtaRecipeName.setEnabled(false);
        jcpRecipeName.setViewportView(jtaRecipeName);

        jcpRecipeName1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jcpRecipeName1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jtStatus.setEditable(false);
        jtStatus.setColumns(20);
        jtStatus.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jtStatus.setRows(5);
        jtStatus.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jtStatus.setEnabled(false);
        jcpRecipeName1.setViewportView(jtStatus);

        javax.swing.GroupLayout jpHeadLayout = new javax.swing.GroupLayout(jpHead);
        jpHead.setLayout(jpHeadLayout);
        jpHeadLayout.setHorizontalGroup(
            jpHeadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpHeadLayout.createSequentialGroup()
                .addGap(3, 3, 3)
                .addComponent(jcpRecipeName, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpHeadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpHeadLayout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jtTimeAll, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1))
                .addGroup(jpHeadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpHeadLayout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jtTimeStep, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jpHeadLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jcpRecipeName1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpHeadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpHeadLayout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtTempToBe, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtTempIs, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpHeadLayout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4)))
                .addContainerGap())
        );
        jpHeadLayout.setVerticalGroup(
            jpHeadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jcpRecipeName, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jcpRecipeName1, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(jpHeadLayout.createSequentialGroup()
                .addGroup(jpHeadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpHeadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpHeadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jpHeadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jtTempToBe, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1)
                            .addComponent(jButton2))
                        .addComponent(jtTempIs, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jpHeadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jtTimeStep, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jtTimeAll, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );

        jtbStartStop.setBackground(new java.awt.Color(204, 204, 255));
        jtbStartStop.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jtbStartStop.setText("Start");
        jtbStartStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtbStartStopActionPerformed(evt);
            }
        });

        jtbPump.setText("<html>Pumpe ein</html>");
        jtbPump.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jtbPump.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtbPumpActionPerformed(evt);
            }
        });

        jtbHeater.setText("Heizen an");
        jtbHeater.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtbHeaterActionPerformed(evt);
            }
        });

        jbConfirm.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jbConfirm.setText("Manuell");
        jbConfirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbConfirmActionPerformed(evt);
            }
        });

        jbPMinus.setText("-");
        jbPMinus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbPMinusActionPerformed(evt);
            }
        });

        jbPPlus.setText("+");
        jbPPlus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbPPlusActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpControlLayout = new javax.swing.GroupLayout(jpControl);
        jpControl.setLayout(jpControlLayout);
        jpControlLayout.setHorizontalGroup(
            jpControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpControlLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jbConfirm, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                    .addComponent(jtbPump)
                    .addComponent(jtbHeater, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jtbStartStop, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jpControlLayout.createSequentialGroup()
                        .addComponent(jbPMinus, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbPPlus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jpControlLayout.setVerticalGroup(
            jpControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpControlLayout.createSequentialGroup()
                .addComponent(jtbStartStop, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jtbPump, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addGroup(jpControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jbPMinus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jbPPlus, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jtbHeater, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jbConfirm, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jtStepName.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jtStepName.setFocusable(false);
        jtStepName.setRequestFocusEnabled(false);

        jLabel5.setText("Dauer");

        jtDuration.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jtDuration.setFocusable(false);
        jtDuration.setRequestFocusEnabled(false);

        jtpIngredients.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jtpIngredients.setText("blabla");
        jtpIngredients.setFocusable(false);
        jtpIngredients.setRequestFocusEnabled(false);
        jScrollPane1.setViewportView(jtpIngredients);

        javax.swing.GroupLayout jpPrevStepLayout = new javax.swing.GroupLayout(jpPrevStep);
        jpPrevStep.setLayout(jpPrevStepLayout);
        jpPrevStepLayout.setHorizontalGroup(
            jpPrevStepLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpPrevStepLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpPrevStepLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(jtStepName)
                    .addGroup(jpPrevStepLayout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jtDuration, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jpPrevStepLayout.setVerticalGroup(
            jpPrevStepLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpPrevStepLayout.createSequentialGroup()
                .addComponent(jtStepName, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpPrevStepLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jtDuration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jpCurrentStep.setMaximumSize(new java.awt.Dimension(2147483647, 250));
        jpCurrentStep.setLayout(new java.awt.CardLayout());

        jPanel1.setMaximumSize(new java.awt.Dimension(32767, 250));
        jPanel1.setPreferredSize(new java.awt.Dimension(200, 250));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 200, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jpCurrentStep.add(jPanel1, "card2");

        jbBack.setBackground(new java.awt.Color(153, 204, 255));
        jbBack.setText("zurück");
        jbBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbBackActionPerformed(evt);
            }
        });

        jbMinus.setBackground(new java.awt.Color(153, 204, 255));
        jbMinus.setText("- 1 Min.");
        jbMinus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbMinusActionPerformed(evt);
            }
        });

        jbPlus.setBackground(new java.awt.Color(102, 204, 255));
        jbPlus.setText("+ 1 Min");
        jbPlus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbPlusActionPerformed(evt);
            }
        });

        jbNext.setBackground(new java.awt.Color(102, 204, 255));
        jbNext.setText("weiter");
        jbNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbNextActionPerformed(evt);
            }
        });

        jtbPause.setBackground(new java.awt.Color(255, 142, 3));
        jtbPause.setText("Pause");
        jtbPause.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtbPauseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpTimeLineLayout = new javax.swing.GroupLayout(jpTimeLine);
        jpTimeLine.setLayout(jpTimeLineLayout);
        jpTimeLineLayout.setHorizontalGroup(
            jpTimeLineLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpTimeLineLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jbBack, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jbMinus)
                .addGap(60, 60, 60)
                .addComponent(jtbPause, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jbPlus, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jbNext, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26))
        );
        jpTimeLineLayout.setVerticalGroup(
            jpTimeLineLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jbBack, javax.swing.GroupLayout.DEFAULT_SIZE, 48, Short.MAX_VALUE)
            .addComponent(jbMinus, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jtbPause, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jbPlus, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jbNext, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jpNextStep.setLayout(new java.awt.CardLayout());

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 200, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jpNextStep.add(jPanel2, "card2");

        jMenuBar1.setBackground(new java.awt.Color(204, 255, 204));
        jMenuBar1.setFocusable(false);
        jMenuBar1.setPreferredSize(new java.awt.Dimension(216, 38));
        jMenuBar1.setRequestFocusEnabled(false);

        jRecipe.setText("Rezept");
        jRecipe.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jRecipe.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jRecipeMouseClicked(evt);
            }
        });
        jMenuBar1.add(jRecipe);

        jBrew.setText("Brauen");
        jBrew.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jMenuBar1.add(jBrew);

        jmTestFrame.setText("Test");
        jmTestFrame.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jmTestFrame.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jmTestFrameMouseClicked(evt);
            }
        });
        jMenuBar1.add(jmTestFrame);

        jMenu2.setText("Ende");
        jMenu2.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jMenu2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jMenu2MousePressed(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu2MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jpHead, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jpControl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jpPrevStep, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jpCurrentStep, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jpNextStep, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 26, Short.MAX_VALUE))
                    .addComponent(jpTimeLine, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jpHead, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jpControl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jpNextStep, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jpCurrentStep, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 287, Short.MAX_VALUE))
                            .addComponent(jpPrevStep, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jpTimeLine, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(33, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jRecipeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jRecipeMouseClicked
        // TODO add your handling code here:
        FullScreen.fullScreen(recipeframe, false);
        recipeframe.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jRecipeMouseClicked

    private void jtbStartStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtbStartStopActionPerformed
        // TODO add your handling code here:
         if(((JToggleButton) evt.getSource()).isSelected()) {
            ((JToggleButton) evt.getSource()).setText("Stop");
            brewProcess = new BrewProcess(brewRecipe);
            Thread thProcess = new Thread(brewProcess);
            thProcess.start();
        } else {
            ((JToggleButton) evt.getSource()).setText("Start");
            brewProcess.stop();
        }
    }//GEN-LAST:event_jtbStartStopActionPerformed

    private void jtbHeaterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtbHeaterActionPerformed
        // TODO add your handling code here:
         if(((JToggleButton) evt.getSource()).isSelected()) {
            ((JToggleButton) evt.getSource()).setBackground(Color.red);
            ((JToggleButton) evt.getSource()).setText("Heizen aus");
            heater.setOn();
        } else {
            ((JToggleButton) evt.getSource()).setBackground(Color.green);
            ((JToggleButton) evt.getSource()).setText("Heizen an");
            heater.setOff();
        }
    }//GEN-LAST:event_jtbHeaterActionPerformed

    private void jtbPumpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtbPumpActionPerformed
        // TODO add your handling code here:
        if(((JToggleButton) evt.getSource()).isSelected()) {
            ((JToggleButton) evt.getSource()).setText("<html>" + pump.getRate() + "%<br> Pumpe aus</html>");
                pump.setOn();
        } else {
            ((JToggleButton) evt.getSource()).setText("<html>Pumpe ein</html>");
            pump.setOff();
        }
    }//GEN-LAST:event_jtbPumpActionPerformed

    private void jmTestFrameMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jmTestFrameMouseClicked
        // TODO add your handling code here:
        FullScreen.fullScreen(testFrame, false);
        testFrame.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jmTestFrameMouseClicked

    private void jtbPauseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtbPauseActionPerformed
        // TODO add your handling code here:
        if(((JToggleButton) evt.getSource()).isSelected()) {
            ((JToggleButton) evt.getSource()).setText("fortsetzen");
            if (brewProcess != null) {
                brewProcess.pause();
            }
        } else {
            ((JToggleButton) evt.getSource()).setText("Pause");
            if (brewProcess != null) {
                brewProcess.restart();
            }
        }
    }//GEN-LAST:event_jtbPauseActionPerformed

    private void jbConfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbConfirmActionPerformed
        // TODO add your handling code here:
        jbConfirm.setBackground(new Color(238,238,238));
        if (brewProcess != null) {
            brewProcess.confirm();
        }
    }//GEN-LAST:event_jbConfirmActionPerformed

    private void jbMinusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbMinusActionPerformed
        // TODO add your handling code here:
        if (brewProcess != null) {
                brewProcess.minus1min();
            }
    }//GEN-LAST:event_jbMinusActionPerformed

    private void jbPlusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbPlusActionPerformed
        // TODO add your handling code here:
        if (brewProcess != null) {
            brewProcess.plus1min();
        }
    }//GEN-LAST:event_jbPlusActionPerformed

    private void jbBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbBackActionPerformed
        // TODO add your handling code here:
        if (brewProcess != null) {
            brewProcess.stepBack();
        }
    }//GEN-LAST:event_jbBackActionPerformed

    private void jbNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbNextActionPerformed
        // TODO add your handling code here:
        if (brewProcess != null) {
            brewProcess.stepForward();
        }
    }//GEN-LAST:event_jbNextActionPerformed

    private void jbPMinusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbPMinusActionPerformed
        // TODO add your handling code here:
        pump.decreaseRate(10);
        if (pump.isOn()) {
            jtbPump.setText("<html>" + pump.getRate() + "%<br> Pumpe aus</html>");
        }
    }//GEN-LAST:event_jbPMinusActionPerformed

    private void jbPPlusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbPPlusActionPerformed
        // TODO add your handling code here:
        pump.increaseRate(10);
        if (pump.isOn()) {
            jtbPump.setText("<html>" + pump.getRate() + "%<br> Pumpe aus</html>");
        }
    }//GEN-LAST:event_jbPPlusActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        brewProcess.decDeltaTargetTemp();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        brewProcess.incDeltaTargetTemp();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jMenu2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu2MouseClicked
        // TODO add your handling code here:
        if (JOptionPane.showConfirmDialog(this, "wirklich beenden?", "Ende",YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            pump.setOff();
            heater.setOff();
            testFrame.dispose();
            recipeframe.dispose();
            isAlive.getAndSet(false);
            this.dispose();
        }
    }//GEN-LAST:event_jMenu2MouseClicked

    private void jMenu2MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu2MousePressed
        // TODO add your handling code here:
        if (JOptionPane.showConfirmDialog(this, "wirklich beenden?", "Ende",YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            pump.setOff();
            heater.setOff();
            testFrame.dispose();
            recipeframe.dispose();
            isAlive.getAndSet(false);
            this.dispose();
        }
    }//GEN-LAST:event_jMenu2MousePressed


/**
 * Set confirm button for manual action to red (= action required)
 */
    public void jbConfirmSetRed() {
        jbConfirm.setBackground(Color.RED);
    }
/**
 * Shows three brew steps on frame, previous, current and next step <br>
 * needs global variables brewRecipe which must contain the  <br>
 * current brew recipe
 * @param startStep First brew step to be shown on frame
 */
    public void setStepsinFrame(Integer startStep) {
       if (startStep + 2 > brewRecipe.getNumberOfSteps()) {
           firstStepinFrame = brewRecipe.getNumberOfSteps() - 2;
           if (firstStepinFrame < 1) {
               firstStepinFrame = 1;
           }
       } else {
           firstStepinFrame = startStep;
       }
              
       jpPrevStep.removeAll();
       jpPrevStep.setLayout(new java.awt.CardLayout());
       
       if (firstStepinFrame <= brewRecipe.getNumberOfSteps()) {
           jpPrevStep.add(new JPBrewStep(brewRecipe.getBrewStepbyPosition(firstStepinFrame)), "card2");
           jpPrevStep.revalidate();
           jpPrevStep.repaint();
       }
       
       jpCurrentStep.removeAll();
       
       if (firstStepinFrame + 1 <= brewRecipe.getNumberOfSteps()) {
           jpCurrentStep.add(new JPBrewStep(brewRecipe.getBrewStepbyPosition(firstStepinFrame + 1)), "card2");
           jpCurrentStep.revalidate();
           jpCurrentStep.repaint();
       }
       
       jpNextStep.removeAll();
       
       if (firstStepinFrame + 2 <= brewRecipe.getNumberOfSteps()) {
           jpNextStep.add(new JPBrewStep(brewRecipe.getBrewStepbyPosition(firstStepinFrame + 2)), "card2");
           jpNextStep.revalidate();
           jpNextStep.repaint();
       }
       
       try {
                Thread.sleep(500);
            } catch (InterruptedException ex) {
                Logger.getLogger(BrewProcess.class.getName()).log(Level.SEVERE, null, ex);
            }    
       pack();
    }

/**
 * Set a colored border around a brew step on frame <br>
 * Used to show the active brew step <br>
 * needs global variables brewRecipe which must contain the  <br>
 * current brew recipe
 * @param step First brew step to be shown on frame
 * @param color Color ex. Color.green = running, Color.yellow = waiting 
 */

    
    public void setStepColor(Integer step, Color color){
        jpPrevStep.setBorder(BorderFactory.createEmptyBorder());
        jpCurrentStep.setBorder(BorderFactory.createEmptyBorder());
        jpNextStep.setBorder(BorderFactory.createEmptyBorder());
        if (step == firstStepinFrame) {
            jpPrevStep.setBorder(BorderFactory.createLineBorder(color, 5));
        }
        if (step == firstStepinFrame + 1) {
            jpCurrentStep.setBorder(BorderFactory.createLineBorder(color, 5));
        }
        if (step == firstStepinFrame + 2) {
            jpNextStep.setBorder(BorderFactory.createLineBorder(color, 5));
        }
    }
    
/**
 * Set time which process is running on frame in jtTimeAll<br>
 * @param timeinSec past time since start in seconds 
 */

    public void setTimeAll(Integer timeinSec) {
        StringBuilder sbTime = new StringBuilder();
        Integer hours = timeinSec / 3600;
        Integer minutes = (timeinSec - (hours * 3600)) / 60;
        Integer seconds = timeinSec % 60;
        if (hours > 0) {
            sbTime.append(hours.toString());
            sbTime.append(":");
        }
        if (minutes < 10) {
            sbTime.append("0");
        }
        sbTime.append(minutes.toString());
        sbTime.append(":");
        if (seconds < 10) {
            sbTime.append("0");
        }
        sbTime.append(seconds.toString());
        jtTimeAll.setText(sbTime.toString());
    }

/**
 * Set time which process step is running on frame in jtTimeStep<br>
 * @param timeinSec past time since start of step in seconds 
 */

    public void setTimeStep(Integer timeinSec) {
        StringBuilder sbTime = new StringBuilder();
        Integer hours = timeinSec / 3600;
        Integer minutes = (timeinSec - (hours * 3600)) / 60;
        Integer seconds = timeinSec % 60;
        if (hours > 0) {
            sbTime.append(hours.toString());
            sbTime.append(":");
            if (minutes < 10) {
                sbTime.append("0");
            }
        }
        sbTime.append(minutes.toString());
        sbTime.append(":");
        if (seconds < 10) {
            sbTime.append("0");
        }
        sbTime.append(seconds.toString());
        jtTimeStep.setText(sbTime.toString());
    }

/**
 * Set target temperatur of brewstep in frame in jtTempToBe<br>
 * @param temp temperatur in  °C
 */
    public void setTempToBe(double temp) {
        jtTempToBe.setText(numberFormat.format(temp) + " °C");
    }
/**
 * Set current temperatur in frame in jtTempIs<br>
 * @param temp temperatur in  °C
 */
    public void setTempIs(double temp) {
        jtTempIs.setText(numberFormat.format(temp) + " °C");
    }
    public void setStatus(String status) {
       jtStatus.setLineWrap(true);
       jtStatus.setWrapStyleWord(true);
       jtStatus.setText(status);
    }

/**
 * Set status of pump in frame by triggering the action button for pump<br>
 * So action buttion show the current status 
 * @param onoff ON or OFF 
 */

    public void setPump(String onoff) {
        if (onoff.equals("ON")) {
            if (!jtbPump.isSelected()) {
                jtbPump.doClick();
            }    
        } 
        if (onoff.equals("OFF")) {
            if (jtbPump.isSelected()) {
                jtbPump.doClick();
            }
        } 
    }

 
/**
 * Set status of heater in frame by triggering the action button for heater<br>
 * So action buttion show the current status 
 * @param onoff ON or OFF 
 */

    public void setHeater(String onoff) {
        if (onoff.equals("ON")) {
            if (!jtbHeater.isSelected()) {
                jtbHeater.doClick();
            }
        } 
        if (onoff.equals("OFF")) {
            if (jtbHeater.isSelected()) {
                jtbHeater.doClick();
            }    
        } 
    }


/**
 * Set status of heater in frame by triggering the action button for stop<br>
 * So action buttion show the current status 
 */    

    public void setFinished() {
        if (jtbStartStop.isSelected()) {
             jtbStartStop.doClick();
        } 
    }


    
    private Integer firstStepinFrame;
    private NumberFormat numberFormat;
    private BrewProcess brewProcess;
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jBrew;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JMenu jRecipe;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbBack;
    private javax.swing.JButton jbConfirm;
    private javax.swing.JButton jbMinus;
    private javax.swing.JButton jbNext;
    private javax.swing.JButton jbPMinus;
    private javax.swing.JButton jbPPlus;
    private javax.swing.JButton jbPlus;
    private javax.swing.JScrollPane jcpRecipeName;
    private javax.swing.JScrollPane jcpRecipeName1;
    private javax.swing.JMenu jmTestFrame;
    private javax.swing.JPanel jpControl;
    private javax.swing.JPanel jpCurrentStep;
    private javax.swing.JPanel jpHead;
    private javax.swing.JPanel jpNextStep;
    private javax.swing.JPanel jpPrevStep;
    private javax.swing.JPanel jpTimeLine;
    private javax.swing.JTextField jtDuration;
    private javax.swing.JTextArea jtStatus;
    private javax.swing.JTextField jtStepName;
    private javax.swing.JTextField jtTempIs;
    private javax.swing.JTextField jtTempToBe;
    private javax.swing.JTextField jtTimeAll;
    private javax.swing.JTextField jtTimeStep;
    private javax.swing.JTextArea jtaRecipeName;
    private javax.swing.JToggleButton jtbHeater;
    private javax.swing.JToggleButton jtbPause;
    private javax.swing.JToggleButton jtbPump;
    private javax.swing.JToggleButton jtbStartStop;
    private javax.swing.JTextPane jtpIngredients;
    // End of variables declaration//GEN-END:variables
}
